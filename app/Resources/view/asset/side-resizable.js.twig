{# Layout @see https://codepen.io/rstrahl/pen/eJZQej #}
$('.side-left').resizable({ handleSelector: '.side-splitter', resizeHeight: false });

{# RadioButtons: @see http://jsfiddle.net/dan74/6KYVP #}
var radiobuttons = $('input:radio'), requiredRadios = [];
radiobuttons.each(function() {
    var item = this.id.split('-');
    if (!(item[0] in requiredRadios)) {
        requiredRadios[item[0]] = [];
    }
    requiredRadios[item[0]][item[1]] = $(this).prop('required');
    if ($(this).prop('checked') !== false) {
        $(this).attr('oldStatus', 'checked');
    }
});
radiobuttons.on('click', function() {
    var oldStatus = $(this).attr('oldStatus');
    if (oldStatus === 'checked' || (typeof oldStatus === 'undefined' && $(this).prop('checked') === false)) {
        $(this).prop('checked', false);
        $(this).removeAttr('oldStatus');
        fixRadioButtons(this);
    } else {
        $('input[name="'+$(this).prop('name')+'"]:radio').attr('oldStatus', false);
        $(this).attr('oldStatus', 'checked');
        {# @see http://stackoverflow.com/a/24392931 #}
        var key, item = this.id.split('-');
        for (key in requiredRadios[item[0]]) {
            $('#'+item[0]+'-'+key).get(0).setCustomValidity('');
        }
    }
});

function fixRadioButtons(elem) {
    if ($('input[name="'+elem.name+'"]:checked').length === 0 && $('input[name="'+elem.name+'"]:required').length === 0) {
        $('<input type="hidden" name="'+elem.name+'" value=""/>').appendTo($(elem).parents('form:first'));
    }
}

{# Checkboxes: @see http://stackoverflow.com/a/7264962 #}
var checkboxes = $('input:checkbox'), requiredCheckboxes = [];
checkboxes.each(function() {
    var item = this.id.split('-');
    if (!(item[0] in requiredCheckboxes)) {
        requiredCheckboxes[item[0]] = [];
    }
    requiredCheckboxes[item[0]][item[1]] = $(this).prop('required');
});
checkboxes.on('click', function() { fixCheckBoxes(this); });

function fixCheckBoxes(elem) {
    var key, item = elem.id.split('-');

    if (item[1] in requiredCheckboxes[item[0]] && $(elem).prop('checked') === false) {
        fixItemCheckBoxes(item[1], item[0]);
    } else {
        for (key in requiredCheckboxes[item[0]]) {
            $('#'+item[0]+'-'+key).removeAttr('required').get(0).setCustomValidity('');
        }
    }
}

function fixItemCheckBoxes(code, prefix) {
    var key, realRequiredCheckboxes = [];
    realRequiredCheckboxes[prefix] = [];
    for (key in requiredCheckboxes[prefix]) {
        if (requiredCheckboxes[prefix][key] !== false) {
            realRequiredCheckboxes[prefix].push(key);
        }
    }
    var requiredOptions = $('#' + prefix + '-' + realRequiredCheckboxes[prefix].join(',#' + prefix + '-')), requiredOptionsLength = requiredOptions.length;
    $(requiredOptions).each(function () {
        this.checked ? requiredOptionsLength-- : null;
    });
    for (key in realRequiredCheckboxes[prefix]) {
        if (requiredOptionsLength < requiredOptions.length) {
            $(requiredOptions.eq(key)).removeAttr('required');
        } else {
            $(requiredOptions.eq(key)).prop('required', requiredCheckboxes[prefix][code]);
        }
    }
}

{# Forms #}
var forms = document.getElementsByTagName('form');
$.each(forms, function(index, elem) {
    var form = $(elem);
    form.on('submit', function() {
        $(this).find('button').each(function() { this.disabled = true; });
        $(this).find('input[type="checkbox"]:not(:checked)').each(function() {
            $('<input type="hidden" name="'+this.name+'" value=""/>').appendTo(form);
        });
    }).find('button').on('click', function(ev) {
        form.find('input[type="radio"]').each(function() {
            fixRadioButtons(this);
            $(this).next('span').css('color', $(this).is(':invalid') ? 'red' : 'inherit');
        });
        form.find('input[type="checkbox"]').each(function() {
            fixCheckBoxes(this);
            $(this).next('span').css('color', $(this).is(':invalid') ? 'red' : 'inherit');
        });
        if ($(this).hasClass('left-button')) {
            $(forms[1]).not(':submit').find('input').clone().hide().appendTo(
                form.attr('action', parseInt({{ page|number_format }})-1)
            );
        } else if ($(this).hasClass('right-button')) {
            {% if page|number_format == totalPages|number_format %}
                form.attr('action', '/').attr('method', 'get');
            {% endif %}
        }
    });
});

{# TextBoxes: @see http://jsfiddle.net/dan74/6KYVP #}
{# @see https://blog.tallan.com/2011/12/27/text-input-length-limit-with-jquery #}
$.fn.charLimit = function(options) {
    if (options === undefined || options.init === undefined || typeof options.init !== 'number') {
        $.error('Option init must be defined and must be a number.');
    }
    if (options === undefined || options.limit === undefined || typeof options.limit !== 'number') {
        $.error('Option limit must be defined and must be a number.');
    }
    return this.each(function () {
        var self = $(this);
        var charLimit = options.limit;
        function _truncate(ev) {
            var caretPos;
            if (ev.target.selectionStart !== undefined) {
                caretPos = ev.target.selectionEnd;
            } else if (document.selection) {
                ev.target.focus();
                var range = document.selection.createRange();
                range.moveStart('character', -ev.target.value.length);
                caretPos = range.text.length;
            }
            self.val(self.val().substring(0, charLimit));
            _setCaretPos(ev, caretPos);
        }
        function _setCaretPos(ev, pos) {
            if ($(ev.target).get(0).setSelectionRange) {
                $(ev.target).get(0).setSelectionRange(pos, pos);
            } else if ($(ev.target).get(0).createTextRange) {
                var range = $(ev.target).get(0).createTextRange();
                range.collapse(true);
                range.moveEnd('character', pos);
                range.moveStart('character', pos);
                range.select();
            }
        }
        self.keypress(function (ev) {
            var charCount = self.val().length;
            var selected;
            if (ev.target.selectionStart !== undefined) {
                selected = !(ev.target.selectionStart == ev.target.selectionEnd);
            } else if (document.selection) {
                ev.target.focus();
                var range = document.selection.createRange();
                selected = (range.text.length > 0);
            }
            if (charCount > charLimit - 1 && !selected) {
                return false;
            }
            setTimeout(function() { _truncate(ev); }, 1);
        });
        self.bind('paste', function (ev) {
            setTimeout(function() { _truncate(ev); }, 1);
        });
    });
};
$('input:text').each(function() {
    var data = $(this).data();
    $(this).charLimit({
        init: typeof data.minlength === 'undefined' ? 0 : data.minlength,
        limit: typeof data.maxlength === 'undefined' ? 100 : data.maxlength});
});