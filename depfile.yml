# @url https://github.com/sensiolabs-de/deptrac/blob/master/README.md
# In the first section, paths, you declare where deptrac should look for your code. As this is an array of directories, you can specify multiple locations.
paths:
  - ./src
# With the exclude_files section, you can specify one or more regular expressions for files that should be excluded, the most common being probably anything containing the "test" word in the path.
exclude_files:
  - .*test.*
# We defined three layers in the example: Controller, Model and Event. Deptrac is using so called collectors to group classes into layers (in this case by the name of the class).
layers:
  - name: View
    collectors:
      - type: className
        regex: .*View.*
  - name: Controller
    collectors:
      - type: className
        regex: .*Controller.*
  - name: Model
    collectors:
      - type: className
        regex: .*Model.*
  - name: Event
    collectors:
      - type: className
        regex: .*Event.*
# The ruleset section defines, how these layers may or may not depend on other layers. In the example, every class of the Controller-layer may depend on classes that reside in the Event-layer, and classes in the Event-layer may depend on classes in the Model-layer.
# Classes in the Model-layer may NOT depend on any classes in other layers. The ruleset acts as a whitelist, therefore the Model-layer rules can be omitted, however explicitly stating that the layer may not depend on other layers is more declarative.
# If a class in the Model-layer uses a class in the Event-layer, deptrac wil recognize the dependency and throws a violation for this case. The same counts if a Event-layer-class uses a Controller-layer-class.
ruleset:
  Controller:
    - Event
    - View
  Event:
    - Model
  Model:
  View: